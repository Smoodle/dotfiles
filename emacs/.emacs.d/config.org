#+title: My emacs config
#+author: Smoodle

[[file:./gura.png]]

* Basic emacs settings

** Settings

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 140)
  (electric-pair-mode t)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (setq use-dialog-box nil)

  (setq scroll-margin 8)

  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)

  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)

  (setq history-length 25)
  (savehist-mode 1)

  (save-place-mode t)

  (setq save-place-file (concat user-emacs-directory "places"))
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups"))))

  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

  (setq-default indent-tabs-mode t)
  (setq tab-width 2)
  (defvaralias 'c-basic-offset 'tab-width)
  (defvaralias 'cperl-indent-level 'tab-width)

  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)

  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Separate clipboard

#+begin_src emacs-lisp
  (setq x-select-enable-clipboard nil)
  (global-set-key (kbd "C-c y") 'clipboard-yank)
  (global-set-key (kbd "C-c k") 'clipboard-kill-ring-save)
#+end_src

** Better ido mode

#+begin_src emacs-lisp
  (setq ido-create-new-buffer 'always)
  (setq ido-enable-flex-matching t)
  (setq ido-save-directory-list-file nil)
  (setq ido-everywhere t)
  (ido-mode 1)

  (use-package ido-completing-read+
    :config
    (ido-ubiquitous-mode 1))

  (use-package ido-vertical-mode
    :config
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+end_src

** Better window management

#+begin_src emacs-lisp
  (defun my/split-vertical ()
    "Splits the window verically and follows"
    (interactive)
    (split-window-horizontally)
    (other-window 1))

  (defun my/split-horizontal ()
    "Splits the window horizontally and follows"
    (interactive)
    (split-window-vertically)
    (other-window 1))

  (global-set-key (kbd "C-x 2") #'my/split-horizontal)
  (global-set-key (kbd "C-x 3") #'my/split-vertical)

#+end_src

* Packages

** Dashboard

#+begin_src emacs-lisp
  (defun my/dashboard-banner ()
    """Set a dashboard banner including information on package initialization
     time and garbage collections."""
    (setq dashboard-banner-logo-title
          (format "Emacs ready in %.2f seconds with %d garbage collections."
                  (float-time (time-subtract after-init-time before-init-time)) gcs-done)))

  (use-package dashboard
    :init
    (add-hook 'after-init-hook 'dashboard-refresh-buffer)
    (add-hook 'dashboard-mode-hook 'my/dashboard-banner)
    (setq dashboard-center-content t)
    :config
    (setq dashboard-startup-banner (concat user-emacs-directory "megumin_emacs.png"))
    (dashboard-setup-startup-hook))

#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package catppuccin-theme)
  (load-theme 'catppuccin :no-confirm)

  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

** Completion

#+begin_src emacs-lisp
  (setq completion-cycle-threshold 2)
  (setq tab-always-indent 'complete)


  (use-package company
    :config
    (add-to-list 'company-backends 'company-files)
    (global-set-key (kbd "C-<SPC>") #'company-complete)
    (add-hook 'after-init-hook 'global-company-mode))

  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** vterm

#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** Tree sitter

#+begin_src emacs-lisp
  (use-package treesit-auto
    :init
    (setq treesit-auto-install 'prompt)
    :config
    (global-treesit-auto-mode)
    (setq treesit-font-lock-level 4))
#+end_src

** Evil

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** Magit

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Org

#+begin_src emacs-lisp
  (use-package org-roam
    :after org)

  (use-package org-superstar
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

  (use-package org-appear
    :config
    (add-hook 'org-mode-hook 'org-appear-mode))

  ;; Improve org mode looks
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300))

  (defun my/capture-date-name ()
    "Find or create a new date"
    (goto-char (point-min))
    (if (re-search-forward (format-time-string "%d/%m/%y") nil t)
        t
      (goto-char (point-max))
      (insert (format-time-string "* %d/%m/%y\n"))
      ))

  (setq org-capture-templates
        '(
          ("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("e" "Internship" entry (file+function "~/org/internship.org" my/capture-date-name)
           "* %<%H:%M>:\n%i")
          ))

  (global-set-key (kbd "C-c c") #'org-capture)
#+end_src

** Snippets

#+begin_src emacs-lisp
  (use-package yasnippet)
#+end_src

** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

** Which key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

* Programming

** Editor config
#+begin_src emacs-lisp
(use-package editorconfig
:ensure t
:config
(editorconfig-mode 1))
#+end_src
** File detection

*** Auto mode

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.tsx\\'"	.	tsx-ts-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'"	.	typescript-ts-mode))
#+end_src

*** Language reconition

#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src

** Eglot detection

#+begin_src emacs-lisp
  (add-hook 'tsx-ts-mode-hook 'eglot-ensure)
  (add-hook 'typescript-ts-mode-hook 'eglot-ensure)
  (add-hook 'js-base-mode-hook 'eglot-ensure)
#+end_src

** Packages

*** Updated eglot

#+begin_src emacs-lisp
(use-package eglot)
#+end_src

*** Markdown mode
#+begin_src emacs-lisp
(use-package markdown-mode)
#+end_src

** Custom logger

#+begin_src emacs-lisp
  (defun logger_language_message (word)
  (cond
      ((or
      (string-match-p "\\.js\\'" (buffer-file-name))
      (string-match-p "\\.ts\\'" (buffer-file-name))
      (string-match-p "\\.jsx\\'" (buffer-file-name))
      (string-match-p "\\.tsx\\'" (buffer-file-name)))
      (concat "console.log(` " (buffer-file-name) " " (what-line) "   ${" word "}`);"))
      (
      (string-match-p "\\.py\\'" (buffer-file-name))
      (concat "print(\" " (buffer-file-name) " " (what-line) "   \" + " word ")"))
      (
      (string-match-p "\\.java\\'" (buffer-file-name))
      (concat "System.out.println(\" " (buffer-file-name) " " (what-line) "   \" + " word ");"))
      (
      (string-match-p "\\.rs\\'" (buffer-file-name))
      (concat "println!(\" " (buffer-file-name) " " (what-line) "   {}\", " word ");"))
      (t nil)
      )
  )

  (defun smoodle/logger_log ()
  (interactive)
  (let* ((word (current-word)) (message (logger_language_message word)))
      (cond
      ((null message) (message "No logger found for this file type"))
      (t
      (end-of-line)
      (newline-and-indent)
      (insert message)
      )
      )
      )
  )

  (global-set-key (kbd "C-c l") #'smoodle/logger_log)
#+end_src

** Prettier formatter

#+begin_src emacs-lisp
  (defun smoodle/prettier ()
  "Format code with prettier formatter"
  (interactive)
  (shell-command (concat "prettier --write " (buffer-file-name))))

  (add-hook 'js-base-mode-hook (add-hook 'after-save-hook 'smoodle/prettier))
  (add-hook 'json-ts-mode-hook (add-hook 'after-save-hook 'smoodle/prettier))
#+end_src

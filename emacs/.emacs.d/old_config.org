* Themes

#+begin_src emacs-lisp
   (use-package spacemacs-theme :defer t)
   (use-package doom-themes :defer t)
   (use-package modus-themes :defer t)

   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
         doom-themes-enable-italic t) ; if nil, italics is universally disabled
   (load-theme 'doom-one t)

   ;; Enable flashing mode-line on errors
   (doom-themes-visual-bell-config)
   ;; Enable custom neotree theme (all-the-icons must be installed!)
   (doom-themes-neotree-config)
   ;; or for treemacs users
   (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
   (doom-themes-treemacs-config)
   ;; Corrects (and improves) org-mode's native fontification.
   (doom-themes-org-config)

   (set-frame-font "Hack Nerd Font 13" nil t)

   (custom-set-faces
    '(default ((t (:inherit nil :height 143 :family "Hack Nerd Font")))))
#+end_src

* Vterm

#+begin_src emacs-lisp
  (use-package vterm
    :defer t
    :straight t
    :config
    (setq vterm-shell "/usr/bin/zsh"))

  (use-package multi-vterm
    :after vterm
    :defer t
    :straight (:build t))
#+end_src

* Org

#+begin_src emacs-lisp
  ;; Source block expansion
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")) 
#+end_src

#+begin_src emacs-lisp
  (use-package org
    :config
                                          ;(setq org-startup-with-inline-images t)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook 'prettify-symbols-mode)
                                          ;(add-hook 'org-mode-hook 'org-toggle-pretty-entities)
    (add-hook 'org-mode-hook
              (lambda ()
                 (visual-line-mode 1))))

  (setq org-hide-leading-stars t)
  (setq org-hide-emphasis-markers t)
  (setq org-startup-folded t)

  ;; Custom header sizes.
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))

  ;; Don't split src window.
  (setq org-src-window-setup 'current-window)

  (use-package org-indent
    :straight nil)

  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "WAIT(w)"
           "|"                 ; Separates "active" and "inactive" states.
           "DONE(d)"
           "CANCELLED(c)" )))

  (use-package htmlize)

  ;; Better org-bullets
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))

  ;; Automatically create a table of contents.
  (use-package toc-org
    :after (org-mode markdown-mode)
    :hook
    (org-mode-hook . toc-org-mode)
    (markdown-mode-hook . toc-org-mode))

  ;; Evil bindings for Org mode.
  (use-package evil-org
    :after (evil org)
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme '(navigation insert textobjects additional calendar))))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  ;; Make invisible parts of Org elements appear visible.
  (use-package org-appear
    :config
    (add-hook 'org-mode-hook 'org-appear-mode))

  ;; Automatically toggle Org mode LaTeX fragment previews as the cursor enters and exits them.
  (use-package org-fragtog
    :config
    (add-hook 'org-mode-hook 'org-fragtog-mode))

  (use-package org-modern
    :ensure nil
    :hook (org-mode . org-modern-mode)
    :custom
    (org-modern-star nil)
    (org-modern-hide-stars nil)
    (org-modern-variable-pitch nil)
    (org-modern-label-border 0.1))

  ;; Use org roam for roam notes
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/Notes/Roam"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode))
#+end_src

* QoL

Quality-of-life modifications.
** Prefer newer package files.
    #+begin_src emacs-lisp
      (setq load-prefer-newer t)
    #+end_src

** Fill spaces
#+begin_src emacs-lisp
                                          ; (setq window-resize-pixelwise t)
  (setq frame-resize-pixelwise t)
#+end_src

** 'y' or 'n' instead of 'yes' or 'no' when confirming
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Disable backup files
#+begin_src emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+end_src

** Show line numbers
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (global-set-key (kbd "<f9>") 'display-line-numbers-mode)
#+end_src

** Show parent parentheses
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

** New lines at the end of the file
#+begin_src emacs-lisp
                                          ;(setq next-line-add-newlines t)
#+end_src

** Restore escape functionality

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** UTF-8 everywhere
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+end_src

** Change GUI elements
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Fringe mode
#+begin_src emacs-lisp
  (set-fringe-mode 7)
                                          ; (setq-default fringes-outside-margins nil)
                                          ; (setq-default indicate-buffer-boundaries nil)
                                          ; (setq-default indicate-empty-lines nil)
                                          ; (setq-default overflow-newline-into-fringe t)
#+end_src

** Disable the default startup screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Conservative scroll
#+begin_src emacs-lisp
  (setq scroll-conservatively 1)
#+end_src

** Disable ring bell sound
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Prettify symbols
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)

  (add-hook 'org-mode-hook (lambda ()
                             (push '("[ ]" .  "☐") prettify-symbols-alist)
                             (push '("[X]" . "☑" ) prettify-symbols-alist)
                             (push '("[-]" . "❍" ) prettify-symbols-alist)
                             (prettify-symbols-mode)))
#+end_src

** Indentation
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode t) ;; use tabs isntead of spaces
  (setq-default standard-indent 4)
  (setq c-basic-offset tab-width)
  (setq-default electric-indent-inhibit t)
  (setq backward-delete-char-untabify-method 'nil)

  ;; Keeps code always indented.
  ;;(use-package aggressive-indent
  ;;  :diminish aggressive-indent-mode
  ;;  :config
  ;;  (add-hook 'prog-mode-hook #'aggressive-indent-global-mode))

  (use-package highlight-indent-guides
    :hook ((prog-mode . (lambda ()
                          (highlight-indent-guides-mode)
                          (highlight-indent-guides-auto-set-faces))))
    :config
    (setq highlight-indent-guides-method 'character
          highlight-indent-guides-responsive 'top))
#+end_src

** No line wrap in prog-mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'toggle-truncate-lines)
#+end_src

** Disable clipboard sharing

#+begin_src emacs-lisp
  (setq x-select-enable-clipboard nil)

  (global-set-key (kbd "C-c y") 'clipboard-yank)
  (global-set-key (kbd "C-c k") 'clipboard-kill-ring-save)
#+end_src

** Switches cursor automatically to new window
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

** Highlights current line
#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'global-hl-line-mode)
#+end_src

** Bracket pair-matching
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+end_src

** Visiting the configuration
#+begin_src emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src

** Reloading the configuration
#+begin_src emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtine"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src

* Packages

** All the icons
#+begin_src emacs-lisp
  ;; Run M-x all-the-icons-install-fonts
  (use-package all-the-icons
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))

  (use-package all-the-icons-dired
    :after all-the-icons
    :hook
    ((dired-mode . all-the-icons-dired-mode))
    :config
    (setq all-the-icons-dired-monochrome nil))

  (use-package all-the-icons-completion
    :after all-the-icons
    :config
    (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup)
    (all-the-icons-completion-mode))
  #+end_src

** General

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t))

  (general-create-definer smoodle/leader-key
    :prefix "SPC"
    :states 'normal)

  (smoodle/leader-key
    "w" 'save-buffer :which-key "Save Buffer"
    "q" 'delete-window :which-key "Close window"
    "TAB" 'mode-line-other-buffer :which-key "Switch to recent buffer"
    "rg" 'deadgrep :which-key "RipGrep"
    "ca" 'lsp-execute-code-action :which-key "Lsp Code Actions"
    )
#+end_src

** Undo tree

#+begin_src emacs-lisp
(use-package undo-tree
:config
(global-undo-tree-mode 1))
#+end_src

** Evil

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1)
    (evil-set-undo-system 'undo-tree))

  ;; Extra bindings for Evil
  (use-package evil-collection
    :after (evil)
    :config
    (evil-collection-init))

  ;; Commenting lines
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

  ;; Multiple cursors in evil-mode
  (use-package evil-multiedit
    :config (evil-multiedit-default-keybinds))
#+end_src

** Minions

#+begin_src emacs-lisp
  (use-package minions
    :config (minions-mode 1)
    (setq minions-mode-line-lighter "☰"))
#+end_src

** exec path from shell

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :init)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  (when (daemonp)
    (exec-path-from-shell-initialize))
#+end_src

** no littering

#+begin_src emacs-lisp
  (use-package no-littering)

  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

** Which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode))
#+end_src

** Popup kill ring

#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :bind ("M-y" . popup-kill-ring))
#+end_src

** beacon

#+begin_src emacs-lisp
  (use-package beacon
    :init
    (beacon-mode 1))
#+end_src

** highlight-numbers

#+begin_src emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))
#+end_src

** switch-window

#+begin_src emacs-lisp
(use-package switch-window
   :config
   (setq switch-window-input-style 'minibuffer)
   (setq switch-window-increase 4)
   (setq switch-window-threshold 2)
   (setq switch-window-shortcut-style 'qwerty)
   (setq switch-window-qwerty-shortcuts
         '("a" "s" "d" "f" "j" "k" "l"))
   (setq switch-window-minibuffer-shortcut ?z)
   :bind
   ([remap other-window] . switch-window))
#+end_src

** rainbow

#+begin_src emacs-lisp
(use-package rainbow-mode
  :init
    (add-hook 'prog-mode-hook 'rainbow-mode))

(use-package rainbow-delimiters
  :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package doom-modeline
    :after (all-the-icons)
    :config
    (setq doom-modeline-minor-modes t)
    (setq doom-modeline-height 25)
    (setq doom-modeline-bar-width 4)
    (setq doom-modeline-indent-info t)
    (setq doom-modeline-lsp t)
    (setq doom-modeline-github t)
    (setq doom-modeline-buffer-modification-icon t)
    :hook (after-init . doom-modeline-mode))
#+end_src

** page-break-lines

#+begin_src emacs-lisp
  (use-package page-break-lines
    :requires dashboard)
#+end_src

** ivy

Base ivy mode

#+begin_src emacs-lisp
   (use-package ivy
      :init
      (ivy-mode 1)
      :config
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t))
#+end_src

Swipper

#+begin_src emacs-lisp
  (use-package swiper
    :bind
    (("C-s" . swiper)))
#+end_src

Counsel

#+begin_src emacs-lisp
   (use-package counsel
      :config
      (setq ivy-initial-inputs-alist nil)
      :bind (("M-x" . counsel-M-x)
             ("C-x b" . counsel-switch-buffer)
             ("C-x C-f" . counsel-find-file)))
#+end_src

Ivy rich

#+begin_src emacs-lisp
   (use-package ivy-rich
      :init (ivy-rich-mode 1)
      :config
      (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src

Persistent history.

#+begin_src emacs-lisp
  (use-package savehist
    :straight nil
    :init
    (setq history-length 25)
    (savehist-mode))
#+end_src

** dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-center-content t)
    (setq dashboard-startup-banner "/home/smoodle/.emacs.d/megumin_emacs.png")
    (setq dashboard-set-heading-icons t)
    (setq dashboard-week-agenda nil)
    (setq dashboard-set-file-icons t)
    (setq initial-buffer-choice (lambda () (dashboard-refresh-buffer)(get-buffer-create "*dashboard*")))
    (dashboard-setup-startup-hook))
#+end_src

** deadgrep

#+begin_src emacs-lisp
  (use-package deadgrep)
#+end_src

* Custom functions

** Logger

Create a log at point

#+begin_src emacs-lisp
  (defun logger_language_message (word)
    (cond
     ((or
       (string-match-p "\\.js\\'" (buffer-file-name))
       (string-match-p "\\.ts\\'" (buffer-file-name))
       (string-match-p "\\.jsx\\'" (buffer-file-name))
       (string-match-p "\\.tsx\\'" (buffer-file-name)))
      (concat "console.log(` " (buffer-file-name) " " (what-line) "   ${" word "}`);"))
     (
      (string-match-p "\\.py\\'" (buffer-file-name))
      (concat "print(\" " (buffer-file-name) " " (what-line) "   \" + " word ")"))
     (
      (string-match-p "\\.java\\'" (buffer-file-name))
      (concat "System.out.println(\" " (buffer-file-name) " " (what-line) "   \" + " word ");"))
     (
      (string-match-p "\\.rs\\'" (buffer-file-name))
      (concat "println!(\" " (buffer-file-name) " " (what-line) "   {}\", " word ");"))
     (t nil)
     )
    )

  (defun smoodle/logger_log ()
    (interactive)
    (let* ((word (current-word)) (message (logger_language_message word)))
      (cond
       ((null message) (message "No logger found for this file type"))
       (t
        (end-of-line)
        (newline-and-indent)
        (insert message)
        )
       )
      )
    )

  (smoodle/leader-key
    "p" 'smoodle/logger_log :which-key "Write a logger at point"
    )
#+end_src

* Programming

** leetcode

#+begin_src emacs-lisp
  (use-package leetcode
    :config
    (setq leetcode-prefer-language "typescript")
    )
#+end_src

** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode t)
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
                                          ;(setq projectile-track-known-projects-automatically nil)
    (setq projectile-enable-caching t)
    (setq projectile-require-project-root t)
    (setq projectile-dynamic-mode-line nil))
#+end_src

** yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    ;;(use-package yasnippet-snippets)
    ;;(use-package auto-yasnippet)
    (yas-reload-all)
    (yas-global-mode))

  ;; Collection of snippets from Doom Emacs.
  (use-package doom-snippets
    :after yasnippet
    :straight (doom-snippets :type git :host github :repo "hlissner/doom-snippets" :files ("*.el" "*")))

                                          ;(global-set-key (kbd "C-c y") 'yas-insert-snippet)
#+end_src

** Company

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :bind
    (:map company-active-map
          ("C-n". company-select-next)
          ("C-p". company-select-previous)
          ("M-<". company-select-first)
          ("M->". company-select-last)
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :config
    (setq company-dabbrev-other-buffers t
          company-dabbrev-code-other-buffers t)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.3)
    :hook ((text-mode . company-mode)
           (prog-mode . company-mode)
           (org-mode . company-mode)
           (company-mode . yas-minor-mode)
           (lsp-mode . company-mode)))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package company-prescient
    :after (selectrum company)
    :config
    (company-prescient-mode 1)
    (prescient-persist-mode))

  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))

  (use-package ghub
    :demand t
    :after magit)

#+end_src

** LSP

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :custom
    (lsp-auto-guess-root t)
    (lsp-log-io t)
    (read-process-output-max (* 1024 1024)) 
    (lsp-idle-delay 0.5)
    (lsp-prefer-flymake nil))

  ;; Enhance UI
  (use-package lsp-ui
    :after (lsp-mode)
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-enable nil)
    (lsp-ui-doc-header nil)
    ;(lsp-ui-doc-delay 2.0)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-flycheck-enable t)
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-sideline-delay 0.05))

  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))

  ;; (use-package lsp-treemacs
  ;;   :after (lsp-mode)
  ;;   :commands lsp-treemacs
  ;;   :config
  ;;   (lsp-treemacs-sync-mode 1))

  (setq lsp-lens-enable nil)
                                          ;(setq lsp-enable-file-watchers nil)

  (general-define-key
   :states 'normal
   "K" 'lsp-ui-doc-glance
   )

  (smoodle/leader-key
    "l" '(nil :which-key "LSP")
    "li" 'lsp-ui-peek-find-implementation
    "lr" 'lsp-ui-peek-find-references
    "ld" 'lsp-ui-peek-find-definitions
    "ll" 'lsp-ui-flycheck-list
    "gd" 'lsp-find-definition
    "gD" 'lsp-find-declaration
    "la" 'lsp-ui-sideline-apply-code-actions)
#+end_src

** Javascript/TypeScript

#+begin_src emacs-lisp
  (use-package typescript-mode)
  (add-hook 'js-mode-hook #'lsp)
  (add-hook 'typescript-mode-hook #'lsp)
#+end_src

** Lua

#+begin_src emacs-lisp
  (use-package lua-mode)

  (setq lsp-lua-workspace-library '(
                                    (/usr/share/nvim/runtime/lua . t)
                                    (/usr/share/nvim/runtime/lua/lsp . t)
                                    (/usr/share/awesome/lib . t)
                                    ))

  (add-hook 'lua-mode-hook #'lsp)
#+end_src

** Java

#+begin_src emacs-lisp
  (use-package lsp-java
    :config
    (setq lsp-java-vmargs '("-XX:+UseParallelGC" "-XX:GCTimeRatio=4" "-XX:AdaptiveSizePolicyWeight=90" "-Dsun.zip.disableMemoryMapping=true" "-Xmx2G" "-Xms100m"))
    (setq lsp-java-configuration-runtimes '[(:name "Java-17-temurin"
                          :path "/usr/lib/jvm/java-17-temurin/"
                          :default t)
                      (:name "Java-19-openjdk"
                          :path "/usr/lib/jvm/java-19-openjdk/"
                          )])
    )
  (add-hook 'java-mode-hook #'lsp)
#+end_src

